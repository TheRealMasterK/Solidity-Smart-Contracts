//"SPDX-License-Identifier: UNLICENSED"
pragma solidity ^0.8.7;
pragma experimental ABIEncoderV2;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

enum SaleState {
    NOSALE,PRESALE,SALE
}

contract NomadTigers is ERC721, Ownable {
    using SafeMath for uint256;
    uint256 public tokenCounter;

    uint256 private _presalePrice = .04 ether; 
    uint256 private _salePrice = .06 ether; 

    uint256 private _maxPerTx = 21; // Set to one higher than actual, to save gas on <= checks.

    uint256 public _totalSupply = 10000; 

    uint256 public _presaleMaxPerWallet = 6;
    uint256 public _totalMaxPerWallet = 10; 
    string private _baseTokenURI;
    string private _prerevealBaseTokenURI;
    SaleState private _saleState;
    bool public revealed;

    address public NOMAD_TIGERS_COMMUNITY_WALLET = 0x7caFD5d3161a1aad2908d9b8424cc6a033f37630;
    address DEV1 = 0x1B3FEA07590E63Ce68Cb21951f3C133a35032473;

    // Functionality for presale
    mapping(address => bool) addressToPreSaleEntry;

    // Functionality for "max mint per wallet"
    mapping(address => uint256) addressToMinted;

    constructor () ERC721 ("Nomad Tigers","NTS")  {
    }

    function mintPresaleCollectibles(uint256 _count) public payable {
        require(_saleState == SaleState.PRESALE, "Presale is not yet open. See wenPresale and wenSale for more info");

        require(isWalletInPresale(msg.sender), "Wallet isnt in presale! The owner needs to addWalletToPresale.");
        require(msg.value >= (_presalePrice * _count), "Ether value sent is too low");
        require((addressToMinted[msg.sender] + tokenCounter) < _presaleMaxPerWallet, "max reached per wallet");

        createCollectibles(_count);
    }

    function mintCollectibles(uint256 _count) public payable {
        require(_saleState == SaleState.SALE, "Sale is not yet open");
        require(_count < _maxPerTx, "Cant mint more than mintMax");
        require((_count + tokenCounter) <= _totalSupply, "Ran out of NFTs for sale! Sry!");
        require(msg.value >= (_salePrice * _count), "Ether value sent is not correct");
        require((addressToMinted[msg.sender] + tokenCounter) < _totalMaxPerWallet, "max reached per wallet");

        createCollectibles(_count);
    }

    function createCollectibles(uint256 _count) private {
        for(uint i = 0; i < _count; i++) {
            createCollectible();
        }
    }

    function createCollectible() private {
            _safeMint(msg.sender, tokenCounter);
            addressToMinted[msg.sender]++;
            tokenCounter++;
    }
    
    function maxMintsPerTransaction() public view returns (uint) {
        return _maxPerTx - 1; //_maxPerTx is off by 1 for require checks in HOF Mint. Allows use of < instead of <=, less gas
    }
    function getSaleState() private view returns (SaleState){
        return _saleState;
    }
    
    function setSaleState(SaleState saleState) public onlyOwner {
        _saleState = saleState;
    }
    
    function getSalePrice() private view returns (uint){
        return _salePrice;
    }
    
    function getPresalePrice() private view returns (uint){
        return _presalePrice;
    }

    function isWalletInPresale(address _address) public view returns (bool) {
        return addressToPreSaleEntry[_address];
    }
    function addWalletToPreSale(address _address) public onlyOwner {
        addressToPreSaleEntry[_address] = true;
    }
    
    function setBaseURI(string memory baseURI) public onlyOwner {
        _baseTokenURI = baseURI;
    }
    function setPrevealBaseURI(string memory baseURI) public onlyOwner {
        _prerevealBaseTokenURI = baseURI;
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        if(revealed) {
            return string(abi.encodePacked(getBaseURI(), Strings.toString(tokenId)));
        }
        else {
            return _prerevealBaseTokenURI;
        }
    }

    function getBaseURI() public view returns (string memory){
        return _baseTokenURI;
    }
    function withdrawAll() public onlyOwner {
        require(payable(DEV1).send(address(this).balance.div(100).mul(6)));
        require(payable(NOMAD_TIGERS_COMMUNITY_WALLET).send(address(this).balance));
    }
}
